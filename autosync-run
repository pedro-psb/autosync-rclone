#!/bin/bash
# Runs rclone bisync with automatic error handling for common scenarios:
# - First run of bisync
# - Empty directories

script_debug=1
script_test=1
script_verbose=0
log_file='autosync.log'

flags=()
[[ $script_test = 1 ]] && flags+=(--workdir=tmp/cache)

debugme() {
    [[ $script_debug = 1 ]] && "$@" || :
}

logme(){
	# logme [msg]
	echo $1 | tee -a $log_file
}

logmev(){
  # logme [heredoc] [file-to-cat]
	if [[ $script_verbose = 1 ]]; then
		awk '{print "    "$0}' <<- EOF | tee -a $log_file
			$(date)
			[ $1 ]
			$(cat $2)
			---
		EOF
	else
		awk '{print "    "$0}' <<- EOF >> $log_file
			$(date)
			[ $1 ]
			$(cat $2)
			---
		EOF
  fi
}

bisync(){
    # bisync [local] [remote] [flags]
    rclone bisync \
        $1 $2 \
        --verbose \
        "${flags[@]}" \
        $3
}

autosync-run(){
    # autosync-run [local] [remote] [flags]
    logme 'Running autosync-run'
    tmp_file="autosync.tmp"

    if bisync $1 $2 &> $tmp_file; then
				logmev 'autosync.tmp - sucess case' autosync.tmp
        logme 'Autosync succeded'
        return 0
    fi
		logmev 'autosync.tmp - before retry' autosync.tmp

    # Deal with no prior run case (.lst doesn't exit on cache folder)
    if grep -q 'error: cannot find prior Path1 or Path2 listings' "$tmp_file"; then
        logme 'No prior sync. Retrying with --resync'
        rclone test makefile 1 $1/rclone_keep &> /dev/null
        if bisync $1 $2 --resync &> $tmp_file; then
            logme 'Autosync first run succeded'
        else
            logme "Autosync first run failed"
        fi
        logmev 'autosync.tmp - after retry' autosync.tmp
    fi

    # Deal with too many deletes
    if grep -q 'Safety abort: too many deletes' "$tmp_file"; then
        logme 'Safety abort: too many deletes. Creating error file'

        # create readable error message on /errors
        rclone copy $tmp_file "$2/autosync.error.$(date)" &>> autosync.tmp
        logmev 'autosync.tmp - after safety abort' autosync.tmp
    fi
}

main(){
  [[ ${#} -eq 0 ]] && help
  while getopts ":v" opt; do
    case $opt in
      v)  script_verbose=1;;
      /?) echo "Invalid option: -$OPTARG"; exit 1;;
    esac
  done

  autosync-run "$@"
  logme ''
  rm autosync.tmp
}

main "$@"

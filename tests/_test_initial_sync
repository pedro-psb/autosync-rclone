#!/bin/bash
# Test how to automatically deal with first try synching scenario
# Expected behaviour is to merge data from A to R

# SERVER IS SUPPOSED TO BE EMPTY
#1 pc-android empty

# Setup test
result_dir="$0.results"
debug_file="$result_dir/debug.log"
mkdir $result_dir
echo '' > "$result_dir/debug.log"

function setup_test(){
    a="tmp/a"
    b="tmp/b"
    remote="tmp/remote"
    cache="tmp/cache"
    mkdir -p $a $b $remote $cache
}

function teardown_test(){
    # teardown_test [test-name]
    echo -e "\n--------\n"
    log_tree "files_after" tmp $1
    rm -rf tmp
}


function bisync(){
    # bisync [local] [flags]
    rclone bisync \
        $1 $remote \
        --verbose \
        --workdir $cache \
        $2
}

function autosync-run(){
    # autosync-run [local] [remote] [flags]
    echo 'Running autosync-run'
    date | tee autosync.tmp

    bisync $a | tee -a autosync.tmp

    # Deal with no prior run case (.lst doesn't exit on cache folder)
    if grep -q 'error: cannot find prior Path1 or Path2 listings' autosync.tmp; then
        echo 'No prior sync. Trying --resync'
        if bisync $a --resync | tee -a autosync.tmp; then
            echo 'Autosync first run succeded'
        else
            echo "Autosync first run failed"
        fi
    else
        echo 'Autosync succeced'
    fi

    rm autosync.tmp
}

function log_folder(){
    # log_folder [output] [msg] [folder]
    echo $2 >> $1
    ls -a $3 >> $1
}

function log_tree(){
    # log_folder [log-id] [folder] [output]
    tree $2 > "$3.$1"
}

##########
#tests
##########

# a         empty
# b         not tested
# remote    empty
# expectation: both will be empty, but synched (contains .lst)
function test_local-remote-are-empty(){
    test_name="${FUNCNAME[0]}.test"
    echo -e "Should setup the bisync succesfully on second try\n" > "$test_name"
    setup_test $test_name
    
    # Test
    log_tree "files_before" tmp "$test_name"
    echo -e "\n> running $test_name\n"
    autosync-run $a $remote | tee -a "$test_name"
    echo -e "\n> result:"

    # Destroy test
    teardown_test $test_name
}

# a         empty
# b         not tested
# remote    fileA
# expectation: [a] and [remote] will have fileA
function test_local-only-is-empty(){
    test_name="${FUNCNAME[0]}.test"
    echo -e "Should setup the bisync succesfully on second try\n" > "$test_name"
    setup_test $test_name
    rclone test makefile 5000 tmp/remote/fileA &> /dev/null
    
    # Test
    log_tree "files_before" tmp "$test_name"

    echo -e "\n> running $test_name\n"
    autosync-run $a $remote | tee -a "$test_name"
    echo -e "\n> result:\n"

    # Destroy test
    teardown_test $test_name
}

# a         fileA
# b         not tested
# remote    fileB
# expectation: [a] and [remote] will have fileA and fileB
function test_local-remote-with-different-content(){
    test_name="${FUNCNAME[0]}.test"
    echo -e "Should setup the bisync succesfully on second try\n" > "$test_name"
    setup_test $test_name
    rclone test makefile 5000 tmp/a/fileA &> /dev/null
    rclone test makefile 5000 tmp/remote/fileB &> /dev/null
    
    # Test
    log_tree "files_before" tmp "$test_name"

    echo -e "\n> running $test_name\n"
    autosync-run $a $remote &> $debug_file| tee -a "$test_name"
    echo -e "\n> result:\n"

    # Destroy test
    teardown_test $test_name
}

test_local-remote-are-empty
# test_local-only-is-empty
# test_local-remote-with-different-content